variables:
  APP_NAME: GreenGiants-test
  APP_VERSION: "1.0.0"
  S3_BUCKET: ${s3_bucket_uri}
  AWS_ID: ${AWS_ID}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_REGION: eu-west-1
  AWS_REGION_S3: eu-west-1
  AWS_PLATFORM: Python
  BUILD_PATH : /builds/GreenG/Nausicaas-Global-Green-Initiative/buildfile.zip
stages:
  - build
  - validate
  - plan
  - apply
  - deploy
  - destroy
  

image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    
before_script:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - ls 
  - pwd 


build:
  image: 'gitlab/gitlab-ee:latest'
  stage: build
  script:
    -  apt-get update
    -  apt-cache gencaches
    -  apt-get install -y zip unzip
    - ls
    # - cd ..
    # - ls
    - zip  buildfile.zip -r  ./
    - ls
    - pwd
    - ls
  artifacts:
    paths:
      -  /builds/GreenG/Nausicaas-Global-Green-Initiative/buildfile.zip

validate:
  stage: validate
  script:
    - cd terraform
    - rm -rf .terraform
    - terraform --version
    - terraform init
    - terraform validate
    
plan:
  stage: plan
  script:
    - cd terraform
    - rm -rf .terraform
    - terraform --version
    - terraform init
    - terraform plan -out "planfile"
  dependencies:
    - validate
  artifacts:
    paths:
      - /builds/GreenG/Nausicaas-Global-Green-Initiative/terraform/planfile
  when: manual

ebsPlan:
  stage: plan
  script:
    - cd terraform
    - rm -rf .terraform
    - terraform --version
    - terraform init
    - terraform plan -target=aws_elastic_beanstalk_application.application -target=aws_elastic_beanstalk_environment.environment -out "planfile"
  dependencies:
    - validate
  artifacts:
    paths:
      - /builds/GreenG/Nausicaas-Global-Green-Initiative/terraform/planfile
  when: manual
       
apply:
  stage: apply
  script:
    - cd terraform
    - rm -rf .terraform
    - terraform --version
    - terraform init
    - terraform apply -input=false "planfile"
  dependencies:
    - ebsPlan
  when: manual 


create_eb_version:
  stage: deploy
  image: python:latest
  allow_failure: false
  script: |
    pip install awscli #Install awscli tools
    

    echo "Creating AWS Version Label"
    AWS_VERSION_LABEL=${APP_NAME}-${APP_VERSION}-${CI_PIPELINE_ID}
    S3_KEY="$AWS_VERSION_LABEL.zip"

    echo "Uploading to S3"
    aws s3 cp ${BUILD_PATH} s3://$s3_bucket_uri  --region ${AWS_REGION}

    echo "Creating new app version"
    aws elasticbeanstalk create-application-version \
      --application-name ${APP_NAME} \
      --version-label $AWS_VERSION_LABEL \
      --region ${AWS_REGION} \
      --source-bundle S3Bucket=${s3_bucket_uri},S3Key="buildfile.zip" \
      --description "${CI_COMMIT_DESCRIPTION}" \
      --auto-create-application \

    echo "Creating EB Enviroment"
    aws elasticbeanstalk create-environment \
      --application-name ${APP_NAME} \
      --environment-name ${APP_NAME} \
      --cname-prefix ${APP_NAME} \
      --region ${AWS_REGION} \
      --version-label $AWS_VERSION_LABEL \
      --solution-stack-name "64bit Amazon Linux 2 v3.4.4 running Python 3.8"
  when: manual



deploy_aws_eb:
  stage: deploy
  image: coxauto/aws-ebcli
  script: |
    ls
    echo "init app"
    echo \n | eb init -i ${APP_NAME} -p ${AWS_PLATFORM}  --region ${AWS_REGION}
    echo "deploy app"
    eb deploy ${APP_NAME} 
  when: manual
  

destroy:
  stage: destroy
  script:
    - cd terraform
    # - rm -rf .terraform
    - ls
    - terraform --version
    - terraform init
    - terraform plan -destroy -out destroyplan
    - terraform apply destroyplan
    
  when: manual